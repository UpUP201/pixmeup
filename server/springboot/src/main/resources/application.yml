# =========================================
# Default Profile (Common Settings)
# =========================================
spring:
  profiles:
    active: ${SPRING_PROFILES_ACTIVE}
  application:
    name: pixmeup
  jackson:
    time-zone: Asia/Seoul
  custom:
    date-format: yyyy-MM-dd
    datetime-format: yyyy-MM-dd'T'HH:mm:ss
  task:
    scheduling:
      pool:
        size: 5
      thread-name-prefix: pixmeup-scheduler-
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
    encoding:
      charset: UTF-8
      force: true
  file:
    upload:
      path: ${FILE_STORAGE_PATH:./files/upload}
    storage:
      path: ${FILE_STORAGE_PATH:./files/storage}

server:
  port: ${SERVER_PORT:8088}
  forward-headers-strategy: framework
  servlet:
    context-path: ""

logging:
  level:
    root: INFO
    org.springframework.web: INFO
    com.corp: INFO
    org.mybatis: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

springdoc:
  api-docs:
    path: /api/v1/api-docs
  swagger-ui:
    path: /api/v1/swagger-ui.html
    operations-sorter: method

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  metrics:
    tags: # 메트릭에 공통 태그 추가 (선택 사항)
      application: ${spring.application.name}
  endpoint:
    health:
      show-details: always

webauthn:
  rp:
    id: ${WEBAUTHN_RP_ID}
    name: ${WEBAUTHN_RP_NAME}
    origin: ${WEBAUTHN_RP_ORIGIN}

app:
  cookie:
    domain: ${APP_COOKIE_DOMAIN}

coolsms:
  api:
    key: ${COOLSMS_API_KEY}
    secret: ${COOLSMS_API_SECRET}
  sender:
    phone: ${COOLSMS_SENDER_PHONE}
    domain: "https://api.coolsms.co.kr"

fastapi:
  base-url: ${FASTAPI_BASE_URL}

cloud:
  aws:
    region:
      name: ${AWS_REGION}
    credentials:
      access-key: ${AWS_ACCESS_KEY_ID}
      secret-key: ${AWS_SECRET_ACCESS_KEY}
    s3:
      bucket: ${AWS_S3_BUCKET}

---

# =========================================
# Development Profile
# =========================================
spring:
  config:
    activate:
      on-profile: dev
  datasource:
    jdbc-url: ${MYSQL_URL}
    username: ${MYSQL_ROOT_USER}
    password: ${MYSQL_ROOT_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: true
    properties:
      hibernate:
        format_sql: true
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      password: ${REDIS_PASSWORD:}
logging:
  level:
    com.corp: DEBUG
    org.springframework.web: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE

  cache:
    type: redis
    redis:
      time-to-live: 600000

jwt:
  secret: ${JWT_SECRET:your-development-jwt-secret-key-which-is-long-enough}
  issuer: pixmeup-auth-dev
  subject-prefix: pixmeup-dev
  accessTokenExpiration: ${JWT_ACCESS_TOKEN_EXPIRATION:1800000}
  refreshTokenExpiration: ${JWT_REFRESH_TOKEN_EXPIRATION:604800000}
  temporaryTokenExpiration: ${JWT_TEMPORARY_TOKEN_EXPIRATION:300000}

---

# =========================================
# Production Profile
# =========================================
spring:
  config:
    activate:
      on-profile: prod
  datasource:
    jdbc-url: ${MYSQL_URL}
    username: ${MYSQL_ROOT_USER}
    password: ${MYSQL_ROOT_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      password: ${REDIS_PASSWORD}
logging:
  level:
    root: INFO
    com.corp: INFO
  cache:
    type: redis
    redis:
      time-to-live: ${REDIS_TTL:3600000}

jwt:
  secret: ${JWT_SECRET}
  issuer: pixmeup-auth
  subject-prefix: pixmeup
  accessTokenExpiration: ${JWT_ACCESS_TOKEN_EXPIRATION}
  refreshTokenExpiration: ${JWT_REFRESH_TOKEN_EXPIRATION}
  temporaryTokenExpiration: ${JWT_TEMPORARY_TOKEN_EXPIRATION}

---

# =========================================
# Load Test Profile
# =========================================
spring:
  config:
    activate:
      on-profile: loadtest
  # 🔧 File Storage (테스트 시 로컬 경로 또는 테스트용 S3 버킷 사용 고려)
  file:
    upload:
      path: ${FILE_STORAGE_PATH_TEST:${FILE_STORAGE_PATH:./files/upload_test}} # .env 에 FILE_STORAGE_PATH_TEST 정의 권장
    storage:
      path: ${FILE_STORAGE_PATH_TEST:${FILE_STORAGE_PATH:./files/storage_test}}

  # 🛢️ Database (MySQL) - 테스트용 DB 설정 사용
  datasource:
    jdbc-url: ${MYSQL_URL_TEST} # .env 에 정의 필요
    username: ${MYSQL_ROOT_USER}
    password: ${MYSQL_ROOT_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
    type: com.zaxxer.hikari.HikariDataSource 
    maximum-pool-size: 45
    minimum-idle: 10                         
    connection-timeout: 30000
    idle-timeout: 600000
    max-lifetime: 1800000
    hikari:
      data-source-properties:
        cachePrepStmts: true
        prepStmtCacheSize: 250
        prepStmtCacheSqlLimit: 2048
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        format_sql: false

  # 🔌 Redis (운영 Redis 사용 시, 테스트용 prefix 또는 database index 사용 고려)
  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      password: ${REDIS_PASSWORD:}
  cache:
    type: redis
    redis:
      time-to-live: ${REDIS_TTL_TEST:600000} # 테스트용 TTL (예: 10분)

# 📋 Logging Levels
logging:
  level:
    root: INFO
    com.corp: INFO
    org.springframework.web: INFO
    # org.hibernate.SQL: DEBUG # SQL 로깅은 부하 테스트 시 성능에 영향 줄 수 있으므로 기본은 비활성화
    # org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    com.zaxxer.hikari.HikariConfig: DEBUG
    com.zaxxer.hikari: TRACE

# 🔑 JWT - 테스트용 시크릿 사용
jwt:
  secret: ${JWT_SECRET_TEST} # .env 에 정의 필요
  issuer: pixmeup-auth-loadtest
  subject-prefix: pixmeup-loadtest
  accessTokenExpiration: ${JWT_ACCESS_TOKEN_EXPIRATION_TEST:1800000}
  refreshTokenExpiration: ${JWT_REFRESH_TOKEN_EXPIRATION_TEST:604800000}
  temporaryTokenExpiration: ${JWT_TEMPORARY_TOKEN_EXPIRATION_TEST:300000} 

# WebAuthn (테스트 시 동작 방식 고려, 필요시 더미 값 또는 비활성화)
webauthn:
  rp:
    id: ${WEBAUTHN_RP_ID_TEST:localhost-test}
    name: ${WEBAUTHN_RP_NAME_TEST:pixmeup LoadTest}
    origin: ${WEBAUTHN_RP_ORIGIN_TEST:http://localhost:8088}

# Cookie Domain
app:
  cookie:
    domain: ${APP_COOKIE_DOMAIN_TEST:localhost}

# Cool SMS
coolsms:
  api:
    key: ${COOLSMS_API_KEY_TEST:TEST_DUMMY_API_KEY}
    secret: ${COOLSMS_API_SECRET_TEST:TEST_DUMMY_API_SECRET}
  sender:
    phone: ${COOLSMS_SENDER_PHONE_TEST:01000000000}

# FastAPI
fastapi:
  base-url: ${FASTAPI_BASE_URL_TEST}

# AWS S3
cloud:
  aws:
    region:
      name: ${AWS_REGION_TEST:ap-northeast-2}
    credentials:
      access-key: ${AWS_ACCESS_KEY_ID_TEST:TEST_DUMMY_ACCESS_KEY}
      secret-key: ${AWS_SECRET_ACCESS_KEY_TEST:TEST_DUMMY_SECRET_KEY}
    s3:
      bucket: ${AWS_S3_BUCKET_TEST:your-s3-bucket-name-for-testing}

---
